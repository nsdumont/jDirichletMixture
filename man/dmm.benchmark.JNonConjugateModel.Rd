% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dmm_benchmark.R
\name{dmm.benchmark.JNonConjugateModel}
\alias{dmm.benchmark.JNonConjugateModel}
\title{To get MCMC computation times}
\usage{
\method{dmm.benchmark}{JNonConjugateModel}(model, Xdata, alpha = 1,
  m_prior = 3, m_post = 4, iters = 5000, burnin = 200,
  shuffled = TRUE)
}
\arguments{
\item{model}{An object returned by \code{dmm.model()}.}

\item{Xdata}{A 1D array of length N (univariate case) or 2D array of size N-by-d (mulitvariate case),
where d is the dimensionailty of the data and N is the number of observations.}

\item{alpha}{A float. The concentration parameter. Default is 1.0.}

\item{m_prior}{An integer. Optionally paramter only used in non-conjugate case. Default is 3.}

\item{m_post}{An integer. Optionally paramter only used in non-conjugate case. Default is 3.}

\item{iters}{An integer. Number of iterations. Default is 5000.}

\item{burnin}{An integer. Amount of burn-in. Default is 200.}

\item{shuffled}{A logical. Whether or not to shuffle the data. Default is true.}
}
\value{
A dataframe of the time in seconds it took to do 
preprocessing computations, the MCMC computation, and the postprocessing computations.
}
\description{
This function is the same as \code{dmm.cluster} except instead of returning the states it returns the time it took to do 
preprocessing computations, the MCMC computation, and the postprocessing computations. Currently avaible for testing purposes.
}
\details{
Performs \code{iters} iterations of Algorithm 2 (in conjugate case) or Algorithm 8 (in non-conjugate case) from Neal(2000) to generate possible
clusters for the data in \code{Xdata}, using the model in \code{model}, with concentration
parameter \code{alpha}. In the 1D case, \code{Xdata} is assumed to be a 1D array of floats. In
the 2D case, \code{Xdata} is assumed to be a dxN array of floats, where the data is
d-dimensional and N is the number of datapoints.
Returns a dataframe of the time it took to do 
preprocessing computations, the MCMC computation, and the postprocessing computations.
}
